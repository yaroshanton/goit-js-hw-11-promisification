{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","parms","logError","warn","amount","catch"],"mappings":"4EAEA,MAAMA,EAAQC,GACM,IAAIC,QAASC,IACzBC,WAAW,KACPD,EAAQF,IACTA,KAKLI,EAAUC,GAAQC,QAAQC,IAAK,kBAAiBF,OAEtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAIjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,IACf,IAAIb,QAASC,IAIzBA,EAHqBW,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAOnEC,EAAUC,GAAgBZ,QAAQa,MAAMD,GAE9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAKnC,MAIMG,EAAmBC,GACL,IAAIpB,QAAQ,CAACC,EAASoB,KAClC,MAAMvB,GANqBwB,EAMa,IANRC,EAMa,IAL1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAQhCrB,WAAW,KACYsB,KAAKE,SAAW,GAI/BzB,EAAQ,CAACmB,EAAYO,GAAI7B,IAGzBuB,EAAOD,EAAYO,KAExB7B,KAKL8B,EAAcC,IAChBxB,QAAQC,IAAK,eAAcuB,EAAM,mBAAmBA,EAAM,SAGxDC,EAAWH,IACbtB,QAAQ0B,KAAM,gCAA+BJ,+BAGjDR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC7BzB,KAAKqB,GACLK,MAAMH,GAEXX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC7BzB,KAAKqB,GACLK,MAAMH,GAEXX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC7BzB,KAAKqB,GACLK,MAAMH,GAEXX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC7BzB,KAAKqB,GACLK,MAAMH,K","file":"main.928ac1f46302656aaad1.js","sourcesContent":["//TODO: Task 1\n\nconst delay = ms => {\n    const promise = new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms);\n    });\n    return promise;\n};\n\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger1); // Resolved after 2000ms\ndelay(1000).then(logger1); // Resolved after 1000ms\ndelay(1500).then(logger1); // Resolved after 1500ms\n\n//TODO: Task 2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    const promise = new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers);\n    })\n    return promise;\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger2);\ntoggleUserState(users, 'Lux').then(logger2);\n\n\n//TODO: Task 3\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const promise = new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n\n                resolve([transaction.id, delay]);\n\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    })\n    return promise;\n};\n\nconst logSuccess = (parms) => {\n    console.log(`Transaction ${parms[0]} processed in ${parms[1]}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"],"sourceRoot":""}